{"version":3,"sources":["components/Loader/Loader.tsx","api.ts","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["Loader","className","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","useState","error","setError","people","setPeople","isLoading","setIsLoading","personSlug","useParams","useEffect","catch","finally","length","map","person","mother","find","name","motherName","father","fatherName","classNames","slug","to","sex","born","died","App","role","isActive","path","element","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.4d1bc2b1.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Loader } from '../Loader/Loader';\nimport { getPeople } from '../../api';\n\nexport const PeoplePage = () => {\n  const [error, setError] = useState('');\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { personSlug } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setError('Something went wrong');\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {error && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              {error}\n            </p>\n          )}\n\n          {(!error && !people.length && !isLoading) && (\n            <p data-cy=\"noPeopleMessage\">There are no people on the server</p>\n          )}\n          <>\n\n            {people.length && (\n              <table\n                data-cy=\"peopleTable\"\n                className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n              >\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Sex</th>\n                    <th>Born</th>\n                    <th>Died</th>\n                    <th>Mother</th>\n                    <th>Father</th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {people.map((person) => {\n                    const mother = people.find(\n                      ({ name }) => name === person.motherName,\n                    );\n                    const father = people.find(\n                      ({ name }) => name === person.fatherName,\n                    );\n\n                    return (\n                      <tr\n                        data-cy=\"person\"\n                        key={person.slug}\n                        className={classNames({\n                          'has-background-warning':\n                            person.slug === personSlug,\n                        })}\n                      >\n                        <td>\n                          <Link\n                            to={person.slug}\n                            className={classNames({\n                              'has-text-danger': person.sex === 'f',\n                            })}\n                          >\n                            {person.name}\n                          </Link>\n                        </td>\n\n                        <td>{person.sex}</td>\n                        <td>{person.born}</td>\n                        <td>{person.died}</td>\n\n                        {mother ? (\n                          <td>\n                            <Link to={mother?.slug} className=\"has-text-danger\">\n                              {person.motherName}\n                            </Link>\n                          </td>\n                        ) : (\n                          <td>{person.motherName || '-'}</td>\n                        )}\n\n                        {father ? (\n                          <td>\n                            <Link to={father?.slug}>{person.fatherName}</Link>\n                          </td>\n                        ) : (\n                          <td>{person.fatherName || '-'}</td>\n                        )}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            )}\n          </>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  NavLink, Navigate, Route, Routes,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport './App.scss';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavLink\n              to=\"/\"\n              className={({ isActive }) => classNames('navbar-item', {\n                'has-background-grey-lighter': isActive,\n              })}\n            >\n              Home\n            </NavLink>\n\n            <NavLink\n              className={({ isActive }) => classNames('navbar-item', {\n                'has-background-grey-lighter': isActive,\n              })}\n              to=\"/people\"\n            >\n              People\n            </NavLink>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\" element={<h1 className=\"title\">Home Page</h1>} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"title\">Page not found</h1>}\n            />\n            <Route path=\"/home\" element={<Navigate to=\"/\" />} />\n            <Route path=\"/people\" element={<PeoplePage />}>\n              <Route path=\":personSlug?\" />\n            </Route>\n          </Routes>\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}